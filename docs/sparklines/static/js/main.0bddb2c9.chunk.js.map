{"version":3,"sources":["logo.svg","sparklinesgrid.jsx","App.js","reportWebVitals.js","index.js"],"names":["getRandomValues","dataType","Array","fill","map","item","i","Math","random","Date","xVal","yVal","getData","type","vals","ticker","symbol","String","fromCharCode","name","change","volume","floor","push","SparklinesGrid","useState","rowData","setRowData","interval","useRef","gridRef","gridApi","setGridApi","feedInterval","setFeedInterval","sparkType","setSparkType","dummyOptions","setDummyOptions","setDataType","useEffect","gridOptions","columnDefs","field","maxWidth","cellRenderer","defaultColDef","flex","minWidth","resizable","rowHeight","lineSparklineOptions","line","stroke","strokeWidth","padding","top","bottom","marker","size","shape","highlightStyle","barSparklineOptions","valueAxisDomain","columnSparklineOptions","paddingInner","paddingOuter","areaSparklineOptions","axis","startFeed","setInterval","row","current","api","getModel","getRow","data","shifted","shift","diff","isArray","newVolume","applyTransaction","update","parseInt","value","stopFeed","clearInterval","undefined","baseOptions","options","myOptions","JSON","parse","stringify","xKey","yKey","getSparklinesOptions","myDummyOptions","cellRendererParams","isRunning","getColumnDefs","forEach","colDef","sparklineOptions","setColumnDefs","redrawRows","setSparklinesOptions","style","width","onClick","disabled","defaultValue","ref","display","className","height","onGridReady","params","reactUi","paddingLeft","App","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bddb2c9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState, useRef } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\n\nconst NUMBER_OF_VALUES = 10;\nconst NUMBER_OF_ROWS=8;\n\nconst getRandomValues = (dataType)=>{\n    return Array(NUMBER_OF_VALUES).fill().map((item, i) =>{\n      if(dataType===\"numbers\"){\n        return Math.random();\n      }\n      if(dataType===\"tuples\"){ \n        return [new Date(), Math.random()];\n      } \n      //if(dataType===\"objects\"){\n      return {xVal: new Date(), yVal: Math.random()};\n      //}\n    });\n}\n\n\nfunction getData(type=\"numbers\"){\n\n  const vals =[];\n  for(var i=0;i<NUMBER_OF_ROWS;i++){\n    const ticker={};\n    ticker.symbol = String.fromCharCode(65+i);\n    ticker.name = \"Ticker \" + i;\n    ticker.change = getRandomValues(type);\n    ticker.volume = Math.floor(Math.random()*1000000);    \n    vals.push(ticker);\n  }\n  return vals;\n}\n\nconst SparklinesGrid = () => {\n\n    const [rowData, setRowData] = useState([]);\n    const interval = useRef(100);\n    const gridRef = useRef(null);\n    const [gridApi, setGridApi] = useState();\n    \n    const [feedInterval, setFeedInterval] = useState();\n    const [sparkType, setSparkType] = useState(\"lines\");\n    const [dummyOptions, setDummyOptions] = useState({});\n    const [dataType, setDataType] = useState(\"numbers\");\n\n    useEffect(()=>{\n        setRowData(getData(dataType));\n    },[dataType]);\n\n    const gridOptions = {\n        columnDefs: [\n          { field: 'symbol', maxWidth: 120 },\n          { field: 'name', maxWidth: 150 },\n          {\n            field: 'change',\n            cellRenderer: 'agSparklineCellRenderer',\n          },\n          {\n            field: 'volume',\n            type: 'numericColumn',\n            maxWidth: 140,\n            cellRenderer: 'agAnimateShowChangeCellRenderer'\n          },\n        ],\n        defaultColDef: {\n          flex: 1,\n          minWidth: 100,\n          resizable: true,\n        },\n        rowData: getData(),\n        rowHeight: 50\n      };\n\n      //https://www.ag-grid.com/react-data-grid/sparklines-line-customisation/\n      const lineSparklineOptions = {\n        type: 'line',\n        line: {\n            stroke: 'rgb(124, 255, 178)',\n            strokeWidth: 2\n        },\n        padding: {\n            top: 5,\n            bottom: 5\n        },\n        marker: {\n            size: 3,\n            shape: 'diamond',\n        },\n        highlightStyle: {\n            size: 10,\n        },\n    };\n\n    // https://www.ag-grid.com/react-data-grid/sparklines-bar-customisation/\n\n    const barSparklineOptions = {\n        type: 'bar',\n        fill: '#5470c6',\n        stroke: '#91cc75',\n        highlightStyle: {\n          fill: '#fac858',\n        },\n        valueAxisDomain: [0, 1],\n    }\n\n    // https://www.ag-grid.com/react-data-grid/sparklines-column-customisation/\n    const columnSparklineOptions = {\n        type: 'column',\n        fill: '#91cc75',\n        stroke: '#91cc75',\n        highlightStyle: {\n            fill: 'orange'\n        },\n        paddingInner: 0.3,\n        paddingOuter: 0.1,\n    };    \n\n    // https://www.ag-grid.com/react-data-grid/sparklines-area-customisation/\n    const areaSparklineOptions = {\n        type: 'area',\n            fill: 'rgba(216, 204, 235, 0.3)',\n        line: {\n            stroke: 'rgb(119,77,185)',\n        },\n        highlightStyle: {\n            fill: 'rgb(143,185,77)',\n        },\n        axis: {\n            stroke: 'rgb(204, 204, 235)',\n        }\n    };\n\n    const getSparklinesOptions = (options, type)=>{\n\n        const myOptions = JSON.parse(JSON.stringify(options));\n        if(type===\"objects\"){\n            myOptions.xKey='xVal';\n            myOptions.yKey='yVal';\n        }\n\n        return myOptions;\n    }\n\n\n    const setSparklinesOptions = (options)=>{\n\n        var columnDefs;\n        //const api = gridRef.current.api;\n        const api = gridApi;\n\n        if(!api){\n            return;\n        }\n\n        columnDefs = api.getColumnDefs();\n\n        if(!columnDefs){\n            return;\n        }\n\n        columnDefs.forEach(function (colDef) {\n            if(colDef.field===\"change\"){\n                colDef.cellRendererParams={sparklineOptions: options};            \n            }\n        });\n        api.setColumnDefs(columnDefs);\n\n        // rerender the sparklines\n        api.redrawRows();        \n    };\n\n\n    const startFeed = ()=> {\n\n        setFeedInterval(\n            setInterval(function () {\n\n                // pick a random row  \n                const row = gridRef.current.api.getModel().getRow(Math.floor(Math.random()*NUMBER_OF_ROWS));\n                const rowData = row.data;\n                const data = rowData.change.map(i => i);\n                const shifted = data.shift();\n\n                const diff = Math.random();\n                // add new value to the data\n                if(Array.isArray(shifted)){\n                    data.push([new Date(), diff])  \n                }else{\n                    if(typeof shifted === \"object\"){\n                        data.push({xVal: new Date(), yVal: diff})  \n                    }\n                    if(typeof shifted === \"number\"){\n                        data.push(diff)  \n                    }\n                }\n                \n                const newVolume = row.data.volume + (Math.floor(diff*1000))\n\n                rowData.change = data;\n                rowData.volume = newVolume;              \n                gridRef.current.api.applyTransaction({ update: [rowData] });\n\n            }, parseInt(interval.current.value))\n        );\n    }\n\n      const stopFeed = ()=>{\n          clearInterval(feedInterval);\n          setFeedInterval(undefined);\n      }\n\n    useEffect(()=>{\n        \n        const options = {\n                \"lines\" : lineSparklineOptions,\n                \"columns\" : columnSparklineOptions,\n                \"area\" : areaSparklineOptions,\n                \"bar\" : barSparklineOptions\n                }\n\n        const baseOptions = getSparklinesOptions(options[sparkType], dataType);\n\n        const myDummyOptions = {\n            field: 'change',\n            cellRenderer: 'agSparklineCellRenderer',\n          }\n\n        myDummyOptions.cellRendererParams = {\"sparklineOptions\" : baseOptions}\n\n        setDummyOptions(myDummyOptions)\n\n        const isRunning = feedInterval!==undefined;\n\n        if(isRunning)\n            stopFeed();\n\n        setSparklinesOptions(myDummyOptions.cellRendererParams.sparklineOptions);\n\n        if(isRunning)\n          startFeed();\n\n    },[sparkType, dataType])  \n\n    const onGridReady = (params)=>{\n        setGridApi(params.api);\n    }\n\n    return (\n        <div style={{width: \"100%\"}}>\n            <div>\n                <button onClick={startFeed} disabled={feedInterval}>Start Feed</button>\n                <input type=\"number\" defaultValue=\"100\" ref={interval} />\n                <button onClick={stopFeed} disabled={!feedInterval}>Stop Feed</button>\n            </div>\n            <div>\n                <span>Spark Chart Type:</span>\n                <button onClick={()=>setSparkType(\"lines\")} disabled={sparkType===\"lines\"}>Lines</button>\n                <button onClick={()=>setSparkType(\"columns\")} disabled={sparkType===\"columns\"}>Columns</button>\n                <button onClick={()=>setSparkType(\"area\")} disabled={sparkType===\"area\"}>Area</button>\n                <button onClick={()=>setSparkType(\"bar\")} disabled={sparkType===\"bar\"}>Bar</button>\n            </div>\n\n            <div>\n                <span>Data Type:</span>\n                <button onClick={()=>setDataType(\"numbers\")} disabled={dataType===\"numbers\"}>Data Numbers</button>\n                <button onClick={()=>setDataType(\"tuples\")} disabled={dataType===\"tuples\"}>Data Tuples</button>\n                <button onClick={()=>setDataType(\"objects\")} disabled={dataType===\"objects\"}>Data Objects</button>\n            </div>\n            <div style={{display:\"flex\"}}>\n                <div className=\"ag-theme-alpine\" style={{flex:1, height:500}}>\n                    <AgGridReact\n                        ref={gridRef}\n                        onGridReady = {onGridReady}\n                        gridOptions={gridOptions}\n                        rowData={rowData}\n                        reactUi={true}\n                    >\n                    </AgGridReact>\n                </div>\n                <div style={{flex:1, paddingLeft:\"2em\"}}>\n                    <details>\n                        <summary>Sparklines ColumnDef</summary>\n                        <pre>\n                            <code>\n                                {JSON.stringify(dummyOptions, null, 2)}\n                            </code>\n                        </pre>\n                    </details>\n                    <hr/>\n                    <details>\n                        <summary>Sample 'change' field data</summary>\n                        <pre>\n                            <code>\n                                {rowData[0] && JSON.stringify(rowData[0].change, null, 2)}\n                            </code>\n                        </pre>\n                    </details>\n                </div>\n            </div>\n        </div>\n    );\n\n};\n\nexport default SparklinesGrid;","import logo from './logo.svg';\nimport './App.css';\nimport SparklinesGrid from './sparklinesgrid'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <h1>Sparklines Demo</h1>\n      <SparklinesGrid/>\n      <p><a href=\"https://www.ag-grid.com/react-data-grid/sparklines-overview/\" target=\"_blank\">AG Grid Sparklines Demo</a></p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}