{"version":3,"sources":["SliderGame.js","UpDownButtonsHeader.jsx","ControlButtons.jsx","LeftRightButtons.jsx","GridSliderGame.jsx","App.js","reportWebVitals.js","index.js"],"names":["SliderGame","this","baseGameData","NUMBER_OF_COLUMNS","NUMBER_OF_ROWS","getGameData","gameData","Array","from","shuffleData","array","shuffled","length","random","Math","floor","pulled","splice","push","getDataAsRows","newRowData","rowid","row","id","shift","isPuzzleDone","checkGameData","index","convertFromCoOrdsToLinearPosition","col","linearSwapValues","fromRowIndex","fromCellIndex","toRowIndex","toCellIndex","rows","fromPosition","toPosition","swapValue","findRowWithValueInColumn","aValue","searchColumnIndex","searchGameData","hasGapInColumn","rowIndex","foundValue","at","findColumnWithValueInRow","searchRowIndex","hasValueInRow","colIndex","movePieces","actionName","actionOn","UpDownButtonsHeader","props","onClick","e","actionCallBack","target","name","column","instanceId","className","ControlButtons","actionCheckCallback","actionShuffle","LeftRightButtons","GridSliderGame","useState","game","setGame","rowData","setRowData","useEffect","aGame","reorderGrid","blankOrNumberTile","params","value","columnDefs","headerName","cellRenderer","cellRendererParams","headerComponent","headerComponentParams","alert","cellClass","field","defaultColDef","maxWidth","width","rowHeight","App","style","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAAA,SAASA,IAAa,IAAD,OAEjBC,KAAKC,aAAc,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAE5DD,KAAKE,kBAAmB,EACxBF,KAAKG,eAAgB,EAErBH,KAAKI,YAAa,WAIhB,OAHI,EAAKC,WACP,EAAKA,SAAWC,MAAMC,KAAK,EAAKN,eAE3B,EAAKI,UAGdL,KAAKQ,YAAa,WAIhB,IAFA,IAAIC,EAAQH,MAAMC,KAAK,EAAKN,cACtBS,EAAW,GACXD,EAAME,QAAO,CACf,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAWH,EAAME,QAC1CI,EAASN,EAAMO,OAAOJ,EAAQ,GAAG,GACvCF,EAASO,KAAKF,GAElB,EAAKV,SAASK,GAKhBV,KAAKkB,cAAgB,WAInB,IAHA,IAAIC,EAAW,GAEXT,EAAWJ,MAAMC,KAAK,EAAKH,eACvBgB,EAAM,EAAGA,EAAM,EAAKjB,eAAgBiB,IAAQ,CAElD,IADA,IAAMC,EAAM,GACJC,EAAG,EAAGA,EAAG,EAAKpB,kBAAmBoB,IACvCD,EAAI,OAAOC,EAAG,IAAIZ,EAASa,QAE7BJ,EAAWF,KAAKI,GAElB,OAAOF,GAGTnB,KAAKwB,aAAe,WAGlB,IADA,IAAIC,EAAgB,EAAKrB,cACjBsB,EAAM,EAAEA,EAAM,EAAKzB,aAAaU,OAAQe,IAC9C,GAAG,EAAKzB,aAAayB,KAASD,EAAcC,GAC1C,OAAO,EAIX,OAAO,GAIT1B,KAAK2B,kCAAoC,SAACN,EAAKO,GAC7C,OAAQP,EAAI,EAAKnB,kBAAmB0B,GAItC5B,KAAK6B,iBAAmB,SAACC,EAAcC,EAAeC,EAAYC,GAEhE,IAAMC,EAAO,EAAK9B,cAEZ+B,EAAe,EAAKR,kCAAkCG,EAAcC,GACpEK,EAAa,EAAKT,kCAAkCK,EAAYC,GAEtE,GAAGE,GAAgBD,EAAKvB,QAAUyB,GAAcF,EAAKvB,OACnD,OAAOuB,EAGT,GAAGC,EAAe,GAAKC,EAAa,EAClC,OAAOF,EAIT,IAAMG,EAAYH,EAAKC,GAIvB,OAHAD,EAAKC,GAAgBD,EAAKE,GAC1BF,EAAKE,GAAcC,EAEZH,GAITlC,KAAKsC,yBAA2B,SAACC,EAAQC,EAAmBC,GAI1D,IAFA,IAAIC,GAAiB,EACjBC,EAAS,EACPA,EAAU,EAAKxC,eAAgBwC,IACnC,GAAGF,EAAe,EAAKd,kCAAkCgB,EAAUH,MAAsBD,EAAO,CAC9FG,GAAe,EACf,MAIJ,MAAO,CAACE,WAAYF,EAAgBG,GAAIF,IAG1C3C,KAAK8C,yBAA2B,SAACP,EAAQQ,EAAgBN,GAGvD,IAFA,IAAIO,GAAgB,EAChBC,EAAS,EACPA,EAAS,EAAK/C,kBAAkB+C,IACpC,GAAGR,EAAe,EAAKd,kCAAkCoB,EAAgBE,MAAaV,EAAO,CAC3FS,GAAc,EACd,MAGJ,MAAO,CAACJ,WAAYI,EAAgBH,GAAII,IAK1CjD,KAAKkD,WAAa,SAACC,EAAYC,GAE3B,GAAgB,SAAbD,EAAoB,CACnB,MAAyB,EAAKb,yBAAyB,GAAIc,EAAU,EAAKhD,eAAnEwC,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,GAEhBD,GAAmB,IAALC,IACb,EAAKxC,SAAW,EAAKwB,iBAAiBgB,EAAGO,EAAUP,EAAG,EAAGO,IAIjE,GAAgB,OAAbD,EAAkB,CACnB,MAAyB,EAAKb,yBAAyB,GAAIc,EAAU,EAAKhD,eAAnEwC,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,GAEhBD,GAAcC,EAAG,EAAK1C,iBACrB,EAAKE,SAAW,EAAKwB,iBAAiBgB,EAAGO,EAAUP,EAAG,EAAGO,IAI/D,GAAgB,SAAbD,EAAoB,CACrB,MAAyB,EAAKL,yBAAyB,GAAIM,EAAU,EAAKhD,eAAnEwC,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,GAEhBD,GAAcC,EAAG,EAAK3C,oBACvB,EAAKG,SAAW,EAAKwB,iBAAiBuB,EAASP,EAAIO,EAAUP,EAAG,IAIpE,GAAgB,UAAbM,EAAqB,CACtB,MAAyB,EAAKL,yBAAyB,GAAIM,EAAU,EAAKhD,eAAnEwC,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,GAEhBD,GAAmB,IAALC,IACf,EAAKxC,SAAW,EAAKwB,iBAAiBuB,EAASP,EAAG,EAAGO,EAAUP,IAInE,OAAO,EAAK3B,iB,WCjJdmC,EAAsB,SAACC,GAEzB,IAAMC,EAAU,SAACC,GACbF,EAAMG,eAAeD,EAAEE,OAAOC,KAAML,EAAMM,OAAOC,WAAW,IAGhE,OACI,qBAAKC,UAAU,uBAAf,SACI,uBAAMA,UAAU,iBAAhB,UACI,wBAAQH,KAAK,KAAKJ,QAASA,EAA3B,eADJ,QAEI,wBAAQI,KAAK,OAAOJ,QAASA,EAA7B,qBCXVQ,EAAiB,SAACT,GAUpB,OACI,qBAAKQ,UAAU,uBAAf,SACI,uBAAMA,UAAU,iBAAhB,UACI,wBAAQH,KAAK,QAAQJ,QAXjB,WACZD,EAAMU,uBAUE,mBADJ,QAEI,wBAAQL,KAAK,UAAUJ,QARjB,WAChBD,EAAMW,iBAOI,qBCdVC,EAAmB,SAACZ,GAEtB,IAAMC,EAAU,SAACC,GACbF,EAAMG,eAAeD,EAAEE,OAAOC,KAAML,EAAMX,WAG9C,OACI,qBAAKmB,UAAU,qBAAf,SACE,uBAAMA,UAAU,eAAhB,UACI,wBAAQH,KAAK,OAAOJ,QAASA,EAA7B,eADJ,QAEI,wBAAQI,KAAK,QAAQJ,QAASA,EAA9B,qBCDd,SAASY,IAEL,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAGAC,qBAAU,WACN,IAAMC,EAAQ,IAAI3E,EAClBuE,EAAQI,GACRF,EAAWE,EAAMxD,mBAEpB,IAED,IAAMyD,EAAc,SAACxB,EAAYC,GAC7BoB,EAAU,OAACH,QAAD,IAACA,OAAD,EAACA,EAAMnB,WAAWC,EAAYC,KAgBtCwB,EAAoB,SAACC,GACvB,MAAwB,KAAjBA,EAAOC,MAAe,aAAe,aAG1CC,EAAa,CACf,CACIC,WAAY,WACZC,aAAcf,EACdgB,mBAAoB,CAACzB,eAAgBkB,GACrCQ,gBAAiBpB,EACjBqB,sBACI,CACIpB,oBApBQ,WACjBK,EAAK7C,eACJ6D,MAAM,+BAENA,MAAM,wBAiBEpB,cA1BI,WAChBI,EAAK7D,cACLgE,EAAWH,EAAKnD,mBA0BZoE,UAAW,cAEf,CACIC,MAAO,OACPJ,gBAAiB9B,EACjB+B,sBAAsB,CAAC3B,eAAgBkB,GACvCW,UAAWV,GAEf,CACIW,MAAO,OACPJ,gBAAiB9B,EACjB+B,sBAAsB,CAAC3B,eAAgBkB,GACvCW,UAAWV,GAEf,CACIW,MAAO,OACPJ,gBAAiB9B,EACjB+B,sBAAsB,CAAC3B,eAAgBkB,GACvCW,UAAWV,IAQnB,OACI,cAAC,cAAD,CACId,UAAU,kBACViB,WAAYA,EACZS,cARc,CAClBC,SAAS,IACTC,MAAM,KAOFnB,QAASA,EACToB,UAAW,KCtERC,MARf,WACE,OACE,qBAAKC,MAAO,CAACH,MAAM,OAAQI,OAAO,SAAlC,SACA,cAAC3B,EAAD,OCCW4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6fb750a3.chunk.js","sourcesContent":["function SliderGame(){\n\n    this.baseGameData= ['1', '2', '3', '4', '5', '6', '7', '8', ''];\n\n    this.NUMBER_OF_COLUMNS= 3;\n    this.NUMBER_OF_ROWS= 3;\n\n    this.getGameData= ()=>{\n      if(!this.gameData){\n        this.gameData = Array.from(this.baseGameData);\n      }\n      return this.gameData;\n    };\n\n    this.shuffleData= () =>{\n\n      let array = Array.from(this.baseGameData);\n      const shuffled = [];\n      while(array.length){\n          const random = Math.floor(Math.random() * array.length);\n          const pulled = array.splice(random, 1)[0];\n          shuffled.push(pulled);\n      }\n      this.gameData=shuffled;\n    };\n\n    // internally we represent it as a linear array, the grid uses\n    // an x*y array with columns 1-3\n    this.getDataAsRows = ()=>{\n      let newRowData=[];\n      \n      let shuffled = Array.from(this.getGameData());\n      for(let rowid=0; rowid<this.NUMBER_OF_ROWS; rowid++){\n        const row = {};\n        for(let id=0; id<this.NUMBER_OF_COLUMNS; id++){\n          row['pos'+(id+1)]=shuffled.shift();\n        }\n        newRowData.push(row);\n      }\n      return newRowData;\n    };\n\n    this.isPuzzleDone = ()=>{\n\n      let checkGameData = this.getGameData();\n      for(let index=0;index<this.baseGameData.length; index++){\n        if(this.baseGameData[index]!==checkGameData[index]){\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    // in string rowXcol  == positionInString (row*NUMBER_OF_COLUMNS)+col\n    this.convertFromCoOrdsToLinearPosition = (row, col)=>{\n      return (row*this.NUMBER_OF_COLUMNS)+col;\n    }\n\n    // rowIndex is 0 indexed, cellIndex is 0 indexed\n    this.linearSwapValues = (fromRowIndex, fromCellIndex, toRowIndex, toCellIndex)=>{\n\n      const rows = this.getGameData();\n\n      const fromPosition = this.convertFromCoOrdsToLinearPosition(fromRowIndex, fromCellIndex);\n      const toPosition = this.convertFromCoOrdsToLinearPosition(toRowIndex, toCellIndex);\n\n      if(fromPosition >= rows.length || toPosition >= rows.length){\n        return rows;\n      }\n\n      if(fromPosition < 0 || toPosition < 0){\n        return rows;\n      }\n\n\n      const swapValue = rows[fromPosition];\n      rows[fromPosition] = rows[toPosition];\n      rows[toPosition] = swapValue;\n\n      return rows;\n    }\n\n\n    this.findRowWithValueInColumn = (aValue, searchColumnIndex, searchGameData) => {\n\n      let hasGapInColumn = false;\n      let rowIndex=0;\n      for(; rowIndex< this.NUMBER_OF_ROWS; rowIndex++){\n        if(searchGameData[this.convertFromCoOrdsToLinearPosition(rowIndex, searchColumnIndex)]===aValue){\n          hasGapInColumn=true;\n          break;\n        }\n      }\n\n      return {foundValue: hasGapInColumn, at: rowIndex}\n    }\n\n    this.findColumnWithValueInRow = (aValue, searchRowIndex, searchGameData) =>{\n      let hasValueInRow = false;\n      let colIndex=0;\n      for(; colIndex<this.NUMBER_OF_COLUMNS;colIndex++){\n        if(searchGameData[this.convertFromCoOrdsToLinearPosition(searchRowIndex, colIndex)]===aValue){\n          hasValueInRow=true;\n          break;\n        }\n      }\n      return {foundValue: hasValueInRow,  at: colIndex}\n    }\n\n    // up/down where actionOn is the column (0-X)\n    // left/right where actionOn is the row(0-X)\n    this.movePieces = (actionName, actionOn)=>{\n\n        if(actionName===\"down\"){\n            const {foundValue, at} = this.findRowWithValueInColumn(\"\", actionOn, this.getGameData());\n\n            if(foundValue && at!==0){\n                this.gameData = this.linearSwapValues(at,actionOn, at-1, actionOn);                \n            }\n        }\n\n        if(actionName===\"up\"){\n          const {foundValue, at} = this.findRowWithValueInColumn(\"\", actionOn, this.getGameData());\n          \n          if(foundValue && at<this.NUMBER_OF_ROWS){\n              this.gameData = this.linearSwapValues(at,actionOn, at+1, actionOn);    \n          }\n        }\n\n        if(actionName===\"left\"){\n          const {foundValue, at} = this.findColumnWithValueInRow(\"\", actionOn, this.getGameData());\n          \n          if(foundValue && at<this.NUMBER_OF_COLUMNS){\n            this.gameData = this.linearSwapValues(actionOn,at, actionOn, at+1);        \n          }\n        }\n\n        if(actionName===\"right\"){\n          const {foundValue, at} = this.findColumnWithValueInRow(\"\", actionOn, this.getGameData());\n          \n          if(foundValue && at!==0){\n            this.gameData = this.linearSwapValues(actionOn,at-1, actionOn, at);   \n          }\n        }\n\n        return this.getDataAsRows()\n    }\n}\n\nexport {SliderGame}","\nconst UpDownButtonsHeader = (props) => {\n\n    const onClick = (e)=> {\n        props.actionCallBack(e.target.name, props.column.instanceId-1);\n    };\n\n    return (\n        <div className=\"header-buttons-outer\">\n            <span className=\"header-buttons\">            \n                <button name=\"up\" onClick={onClick}>^</button> &nbsp;\n                <button name=\"down\" onClick={onClick}>v</button>\n            </span>\n        </div>\n    );\n};\n\nexport {UpDownButtonsHeader}","const ControlButtons = (props) => {\n\n    const onCheck = ()=> {\n        props.actionCheckCallback();\n    };\n  \n    const onShuffle = ()=> {\n      props.actionShuffle();\n    };\n  \n    return (\n        <div className=\"header-buttons-outer\">\n            <span className=\"header-buttons\">\n                <button name=\"check\" onClick={onCheck}>Done?</button> &nbsp;\n                <button name=\"shuffle\" onClick={onShuffle}>@</button>\n            </span>\n        </div>\n    );\n  };\n\nexport {ControlButtons}  ","const LeftRightButtons = (props)=>{\n\n    const onClick = (e)=> {\n        props.actionCallBack(e.target.name, props.rowIndex);\n    };\n  \n    return (\n        <div className=\"cell-buttons-outer\">\n          <span className=\"cell-buttons\">\n              <button name=\"left\" onClick={onClick}>&lt;</button> &nbsp;\n              <button name=\"right\" onClick={onClick}>&gt;</button>\n          </span>\n      </div>\n    );\n  }\n\n  export {LeftRightButtons}","import './game.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport React, { useEffect, useState } from 'react';\n\nimport {SliderGame} from './SliderGame'\nimport {UpDownButtonsHeader} from './UpDownButtonsHeader'\nimport {ControlButtons} from './ControlButtons'\nimport {LeftRightButtons} from './LeftRightButtons'\n\nfunction GridSliderGame() {\n\n    const [game, setGame] = useState();\n    const [rowData, setRowData] = useState([]);        \n\n  \n    useEffect(()=>{\n        const aGame = new SliderGame();\n        setGame(aGame);\n        setRowData(aGame.getDataAsRows())\n    }\n    ,[]);\n\n    const reorderGrid = (actionName, actionOn)=>{\n        setRowData(game?.movePieces(actionName, actionOn));\n    } \n  \n    const shuffleData = ()=>{\n        game.shuffleData();\n        setRowData(game.getDataAsRows());\n    }\n\n    const checkPuzzleDone = ()=>{\n        if(game.isPuzzleDone()){\n            alert(\"Puzzle complete, well done!\");\n        }else{\n            alert(\"Sorry, not done yet\");\n        }\n    }\n\n    const blankOrNumberTile = (params)=> {\n        return params.value === '' ? 'blank-tile' : 'tile-cell';\n    };\n\n    const columnDefs = [    \n        {\n            headerName: 'controls',\n            cellRenderer: LeftRightButtons,\n            cellRendererParams: {actionCallBack: reorderGrid},\n            headerComponent: ControlButtons,\n            headerComponentParams:\n                {\n                    actionCheckCallback: checkPuzzleDone,\n                    actionShuffle: shuffleData\n                },\n            cellClass: 'blank-tile'\n        },\n        {   \n            field: 'pos1', \n            headerComponent: UpDownButtonsHeader, \n            headerComponentParams:{actionCallBack: reorderGrid},\n            cellClass: blankOrNumberTile\n        },\n        {   \n            field: 'pos2', \n            headerComponent: UpDownButtonsHeader,\n            headerComponentParams:{actionCallBack: reorderGrid},\n            cellClass: blankOrNumberTile\n        },\n        {   \n            field: 'pos3', \n            headerComponent: UpDownButtonsHeader, \n            headerComponentParams:{actionCallBack: reorderGrid},\n            cellClass: blankOrNumberTile\n        }\n    ];\n\n    const defaultColDef = {\n        maxWidth:150,\n        width:120\n    }\n    return (\n        <AgGridReact \n            className=\"ag-theme-alpine\"\n            columnDefs={columnDefs}\n            defaultColDef={defaultColDef}\n            rowData={rowData}\n            rowHeight={80}\n        />\n    );\n  }\n  \n  export {GridSliderGame}","import './App.css';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\n\nimport {GridSliderGame} from './GridSliderGame'\n\n\nfunction App() {\n  return (\n    <div style={{width:\"100%\", height:\"400px\"}}>\n    <GridSliderGame></GridSliderGame>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}