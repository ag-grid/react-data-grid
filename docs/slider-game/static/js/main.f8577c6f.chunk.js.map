{"version":3,"sources":["SliderGame.js","UpDownButtonsHeader.jsx","ControlButtons.jsx","LeftRightButtons.jsx","GridSliderGame.jsx","App.js","reportWebVitals.js","index.js"],"names":["SliderGame","this","baseGameData","MAX_NUMBER_OF_COLUMNS","getGameData","gameData","Array","from","shuffleData","array","shuffled","length","random","Math","floor","pulled","splice","push","getDataAsRows","newRowData","rowid","row","id","shift","isPuzzleDone","checkGameData","index","getRowsAsData","rows","rowData","swapValues","fromRowIndex","fromCellIndex","toRowIndex","toCellIndex","swapValue","findRowWithValueInColumn","aValue","searchColumnIndex","hasGapInColumn","rowIndex","foundValue","at","findColumnWithValueInRow","searchRowIndex","hasValueInRow","colIndex","movePieces","actionName","actionOn","amendRowData","UpDownButtonsHeader","props","onClick","e","actionCallBack","target","name","column","instanceId","className","ControlButtons","actionCheckCallback","actionShuffle","LeftRightButtons","GridSliderGame","useState","game","setRowData","reorderGrid","blankOrNumberTile","params","value","columnDefs","headerName","cellRendererFramework","cellRendererParams","headerComponentFramework","headerComponentParams","alert","cellClass","field","reactUi","rowHeight","App","style","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8577c6f.chunk.js","sourcesContent":["function SliderGame(){\n\n    this.baseGameData= ['1', '2', '3', '4', '5', '6', '7', '8', ''];\n\n    this.MAX_NUMBER_OF_COLUMNS= 3;\n\n    this.getGameData= ()=>{\n      if(!this.gameData){\n        this.gameData = Array.from(this.baseGameData);\n      }\n      return this.gameData;\n    };\n\n    this.shuffleData= () =>{\n\n      let array = Array.from(this.baseGameData);\n      const shuffled = [];\n      while(array.length){\n          const random = Math.floor(Math.random() * array.length);\n          const pulled = array.splice(random, 1)[0];\n          shuffled.push(pulled);\n      }\n      this.gameData=shuffled;\n    };\n\n    this.getDataAsRows = ()=>{\n      let newRowData=[];\n      \n      let shuffled = Array.from(this.getGameData());\n      for(let rowid=1; rowid<=3; rowid++){\n        const row = {};\n        for(let id=1; id<=this.MAX_NUMBER_OF_COLUMNS; id++){\n          row['pos'+id]=shuffled.shift();\n        }\n        newRowData.push(row);\n      }\n      return newRowData;\n    };\n\n    this.isPuzzleDone = ()=>{\n\n      let checkGameData = this.getGameData();\n      for(let index=0;index<this.baseGameData.length; index++){\n        if(this.baseGameData[index]!==checkGameData[index]){\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    // array of objects where each column is posX, where X is a number from 1 to X\n    this.getRowsAsData= (rows)=>{\n      const rowData = [];\n      for(const row of rows){\n        for(let index=1; index<=this.MAX_NUMBER_OF_COLUMNS; index++){\n          rowData.push(row['pos' + index]);\n        }\n      }\n      return rowData;\n    }\n\n    // rowIndex is 0 indexed, cellIndex is 1 indexed\n    this.swapValues = (fromRowIndex, fromCellIndex, toRowIndex, toCellIndex)=>{\n\n      const rows = this.getDataAsRows();\n\n      const swapValue = rows[fromRowIndex]['pos'+fromCellIndex];\n      rows[fromRowIndex]['pos'+fromCellIndex]=rows[toRowIndex]['pos'+toCellIndex];\n      rows[toRowIndex]['pos'+toCellIndex]=swapValue;\n\n      this.gameData = this.getRowsAsData(rows);\n      return rows;\n    }\n\n\n    this.findRowWithValueInColumn = (aValue, searchColumnIndex, rowData) => {\n\n      let hasGapInColumn = false;\n      let rowIndex=0;\n      for(const row of rowData){\n        if(row['pos'+searchColumnIndex]===aValue){\n          hasGapInColumn=true;\n          break;\n        }\n        rowIndex++;\n      }\n\n      return {foundValue: hasGapInColumn, at: rowIndex}\n    }\n\n    this.findColumnWithValueInRow = (aValue, searchRowIndex, rowData) =>{\n      let hasValueInRow = false;\n      let colIndex=0;\n      for(colIndex=1; colIndex<=this.MAX_NUMBER_OF_COLUMNS;colIndex++){\n        if(rowData[searchRowIndex]['pos'+colIndex]===aValue){\n          hasValueInRow=true;\n          break;\n        }\n      }\n      return {foundValue: hasValueInRow,  at: colIndex}\n    }\n\n    // up/down where actionOn is the column (1-X)\n    // left/right where actionOn is the row(0-X)\n    this.movePieces = (actionName, actionOn)=>{\n\n        const amendRowData = this.getDataAsRows();\n\n        if(actionName===\"down\"){\n            const {foundValue, at} = this.findRowWithValueInColumn(\"\", actionOn, amendRowData);\n\n            if(foundValue && at!==0){\n                return this.swapValues(at,actionOn, at-1, actionOn);\n            }\n        }\n\n        if(actionName===\"up\"){\n          const {foundValue, at} = this.findRowWithValueInColumn(\"\", actionOn, amendRowData);\n          \n          if(foundValue && at!==amendRowData.length-1){\n              return this.swapValues(at,actionOn, at+1, actionOn);\n          }\n        }\n\n        if(actionName===\"left\"){\n          const {foundValue, at} = this.findColumnWithValueInRow(\"\", actionOn, amendRowData);\n          \n          if(foundValue && at!==this.MAX_NUMBER_OF_COLUMNS){\n            return this.swapValues(actionOn,at, actionOn, at+1);          \n          }\n        }\n\n        if(actionName===\"right\"){\n          const {foundValue, at} = this.findColumnWithValueInRow(\"\", actionOn, amendRowData);\n          \n          if(foundValue && at!==1){\n            return this.swapValues(actionOn,at, actionOn, at-1);\n          }\n        }\n\n        return amendRowData;\n    }\n}\n\nexport {SliderGame}","\nconst UpDownButtonsHeader = (props) => {\n\n    const onClick = (e)=> {\n        props.actionCallBack(e.target.name, props.column.instanceId);\n    };\n\n    return (\n        <div className=\"header-buttons-outer\">\n            <span className=\"header-buttons\">            \n                <button name=\"up\" onClick={onClick}>^</button> &nbsp;\n                <button name=\"down\" onClick={onClick}>v</button>\n            </span>\n        </div>\n    );\n};\n\nexport {UpDownButtonsHeader}","const ControlButtons = (props) => {\n\n    const onCheck = ()=> {\n        props.actionCheckCallback();\n    };\n  \n    const onShuffle = ()=> {\n      props.actionShuffle();\n    };\n  \n    return (\n        <div className=\"header-buttons-outer\">\n            <span className=\"header-buttons\">\n                <button name=\"check\" onClick={onCheck}>Done?</button> &nbsp;\n                <button name=\"shuffle\" onClick={onShuffle}>@</button>\n            </span>\n        </div>\n    );\n  };\n\nexport {ControlButtons}  ","const LeftRightButtons = (props)=>{\n\n    const onClick = (e)=> {\n        props.actionCallBack(e.target.name, props.rowIndex);\n    };\n  \n    return (\n        <div className=\"cell-buttons-outer\">\n          <span className=\"cell-buttons\">\n              <button name=\"left\" onClick={onClick}>&lt;</button> &nbsp;\n              <button name=\"right\" onClick={onClick}>&gt;</button>\n          </span>\n      </div>\n    );\n  }\n\n  export {LeftRightButtons}","import { AgGridReact } from 'ag-grid-react';\nimport React, { useState } from 'react';\n\nimport {SliderGame} from './SliderGame'\nimport {UpDownButtonsHeader} from './UpDownButtonsHeader'\nimport {ControlButtons} from './ControlButtons'\nimport {LeftRightButtons} from './LeftRightButtons'\n\nfunction GridSliderGame() {\n\n    const [game, setGame] = useState(new SliderGame());\n    const [rowData, setRowData] = useState(game.getDataAsRows());        \n\n  \n    const reorderGrid = (actionName, actionOn)=>{\n        setRowData(game.movePieces(actionName, actionOn));\n    } \n  \n    const shuffleData = ()=>{\n        game.shuffleData();\n        setRowData(game.getDataAsRows());\n    }\n\n    const checkPuzzleDone = ()=>{\n        if(game.isPuzzleDone()){\n            alert(\"Puzzle complete, well done!\");\n        }else{\n            alert(\"Sorry, not done yet\");\n        }\n    }\n\n    const blankOrNumberTile = (params)=> {\n        return params.value === '' ? 'blank-tile' : 'tile-cell';\n    };\n\n    const columnDefs = [    \n        {\n            headerName: 'controls',\n            cellRendererFramework: LeftRightButtons,\n            cellRendererParams: {actionCallBack: reorderGrid},\n            headerComponentFramework: ControlButtons,\n            headerComponentParams:\n                {\n                    actionCheckCallback: checkPuzzleDone,\n                    actionShuffle: shuffleData\n                },\n            cellClass: 'blank-tile'\n        },\n        {   \n            field: 'pos1', \n            headerComponentFramework: UpDownButtonsHeader, \n            headerComponentParams:{actionCallBack: reorderGrid},\n            cellClass: blankOrNumberTile\n        },\n        {   \n            field: 'pos2', \n            headerComponentFramework: UpDownButtonsHeader,\n            headerComponentParams:{actionCallBack: reorderGrid},\n            cellClass: blankOrNumberTile\n        },\n        {   \n            field: 'pos3', \n            headerComponentFramework: UpDownButtonsHeader, \n            headerComponentParams:{actionCallBack: reorderGrid},\n            cellClass: blankOrNumberTile\n        }\n    ];\n\n    return (\n        <AgGridReact \n            reactUi=\"true\"\n            className=\"ag-theme-alpine\"\n            columnDefs={columnDefs}\n            rowData={rowData}\n            rowHeight={80}\n        />\n    );\n  }\n  \n  export {GridSliderGame}","import './App.css';\nimport './game.css';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\n\nimport {GridSliderGame} from './GridSliderGame'\n\n\nfunction App() {\n  return (\n    <div style={{width:\"100%\", height:\"400px\"}}>\n    <GridSliderGame></GridSliderGame>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}