{"version":3,"sources":["PodcastGrid.js","App.js","reportWebVitals.js","index.js"],"names":["PodcastGrid","props","useState","rowData","setRowData","gridApi","setGridApi","useEffect","fetch","rssfeed","then","response","text","str","window","DOMParser","parseFromString","data","itemList","querySelectorAll","items","forEach","el","push","pubDate","Date","querySelector","textContent","title","innerHTML","mp3","getAttribute","description","replace","setQuickFilter","quickFilter","className","style","height","width","onGridReady","params","api","columnDefs","headerName","field","wrapText","autoHeight","flex","resizable","filter","sortable","hide","cellRenderer","value","pagination","paginationPageSize","App","rssFeed","setRssFeed","htmlFor","type","id","name","defaultValue","onClick","inputRssFeed","document","getElementById","onChange","event","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gQAMO,SAASA,EAAYC,GAExB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,qBAA9B,mBAAOG,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WAERC,MAAMP,EAAMQ,SACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAG,OAAI,IAAIC,OAAOC,WAAYC,gBAAgBH,EAAK,eACxDH,MAAK,SAAAO,GACF,IAAMC,EAAWD,EAAKE,iBAAiB,QAEjCC,EAAM,GACZF,EAASG,SAAQ,SAAAC,GACbF,EAAMG,KAAK,CACXC,QAAS,IAAIC,KAAKH,EAAGI,cAAc,WAAWC,aAC9CC,MAAON,EAAGI,cAAc,SAASG,UACjCC,IAAKR,EAAGI,cAAc,aAAaK,aAAa,OAChDC,YAAaV,EACRI,cAAc,eACdC,YAAYM,QAAQ,gBAAiB,SAI9C7B,EAAWgB,QAGzB,CAACnB,EAAMQ,UA4CT,OANAF,qBAAU,WACLF,GACDA,EAAQ6B,eAAejC,EAAMkC,eAE9B,CAAC9B,EAASJ,EAAMkC,cAGhB,qBAAKC,UAAU,kBAAkBC,MAAO,CAACC,OAAQrC,EAAMqC,OAAQC,MAAOtC,EAAMsC,OAA5E,SACI,cAAC,cAAD,CACKC,YAbQ,SAACC,GACnBnC,EAAWmC,EAAOC,MAaRvC,QAASA,EACTwC,WA/CK,CACb,CACEC,WAAY,gBACZC,MAAO,QACPC,UAAU,EACVC,YAAY,EACZC,KAAM,EACNC,WAAW,EACXC,OAAO,oBAET,CACEN,WAAY,YACZC,MAAO,UACPM,UAAU,EACVD,OAAQ,sBAEV,CACEL,MAAO,cACPO,MAAM,GAER,CACER,WAAY,UACZC,MAAO,MACPG,KAAM,EACNK,aAAe,SAACZ,GAAD,0LAE6BA,EAAOa,MAFpC,wEAIfP,YAAY,IAoBNQ,YAAY,EACZC,mBAAoB,OC1CrBC,MAvCf,WAEE,MAA8BvD,mBAAS,yCAAvC,mBAAOwD,EAAP,KAAgBC,EAAhB,KACA,EAAsCzD,mBAAS,IAA/C,mBAAOiC,EAAP,KAAoBD,EAApB,KAWA,OACE,sBAAKE,UAAU,MAAf,UACE,gDACA,gCACE,uBAAOwB,QAAQ,aAAf,2BACA,uBAAOC,KAAK,OAAOC,GAAG,aAAaC,KAAK,aAAc1B,MAAO,CAACE,MAAM,OAAQyB,aAAcN,IAC1F,wBAAQO,QAfc,WAC1B,IAAMC,EAAeC,SAASC,eAAe,cAAcd,MAC3DK,EAAWO,IAaP,0BAEF,gCACA,uBAAON,QAAQ,cAAf,2BACE,uBAAOC,KAAK,OAAOC,GAAG,cAAcC,KAAK,cAAc1B,MAAO,CAACE,MAAM,OAAQe,MAAOnB,EAC9EkC,SAfe,SAACC,GAC1BpC,EAAeoC,EAAMC,OAAOjB,aAgB1B,8BACE,cAACtD,EAAD,CACAS,QAAWiD,EACXpB,OAAO,QACPC,MAAM,OACNJ,YAAeA,UCxBRqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhE,MAAK,YAAkD,IAA/CiE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASC,eAAe,SAM1BI,M","file":"static/js/main.5ddaf466.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {AgGridReact} from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nexport function PodcastGrid(props) {\n\n    const [rowData, setRowData] = useState([]);\n    const [gridApi, setGridApi] = useState();\n\n    useEffect(()=>{\n\n      fetch(props.rssfeed)\n                .then(response => response.text())\n                .then(str => new window.DOMParser().parseFromString(str, 'text/xml'))\n                .then(data => {            \n                    const itemList = data.querySelectorAll('item');\n            \n                    const items=[];\n                    itemList.forEach(el => {\n                        items.push({\n                        pubDate: new Date(el.querySelector('pubDate').textContent),\n                        title: el.querySelector('title').innerHTML,\n                        mp3: el.querySelector('enclosure').getAttribute('url'),\n                        description: el\n                            .querySelector('description')\n                            .textContent.replace(/(<([^>]+)>)/gi, ''),\n                        });\n                    });\n\n                    setRowData(items)\n                });\n\n    },[props.rssfeed]);\n\n    var columnDefs = [\n        {\n          headerName: 'Episode Title',\n          field: 'title',\n          wrapText: true,\n          autoHeight: true,\n          flex: 1,\n          resizable: true,\n          filter: `agGridTextFilter`\n        },\n        {\n          headerName: 'Published',\n          field: 'pubDate',\n          sortable: true,\n          filter: 'agDateColumnFilter'\n        },\n        {\n          field: 'description',\n          hide: true\n        },\n        {\n          headerName: 'Episode',\n          field: 'mp3',\n          flex: 2,\n          cellRenderer: ((params)=>`<audio controls preload=\"none\"\n                                        style=\"height:2em; vertical-align: middle;\">\n                                        <source src=${params.value} type=\"audio/mpeg\" />\n                                    </audio>`),\n          autoHeight: true\n        }\n      ];\n\n    const onGridReady = (params) => {\n      setGridApi(params.api);\n    }\n\n    useEffect(()=>{\n      if(gridApi){\n        gridApi.setQuickFilter(props.quickFilter);\n      }\n    }, [gridApi, props.quickFilter])\n\n    return (\n       <div className=\"ag-theme-alpine\" style={{height: props.height, width: props.width}}>   \n           <AgGridReact\n                onGridReady={onGridReady}\n                rowData={rowData}\n                columnDefs ={columnDefs}\n                pagination={true}\n                paginationPageSize={10}\n                >\n           </AgGridReact>\n       </div>\n    )\n};","import './App.css';\nimport React, {useState} from 'react';\nimport {PodcastGrid} from './PodcastGrid';\n\nfunction App() {\n\n  const [rssFeed, setRssFeed] = useState(\"https://feeds.simplecast.com/tOjNXec5\");\n  const [quickFilter, setQuickFilter] = useState(\"\");\n\n  const handleLoadFeedClick = ()=>{\n    const inputRssFeed = document.getElementById(\"rssFeedUrl\").value;\n    setRssFeed(inputRssFeed);\n  }\n\n  const handleFilterChange = (event)=>{\n    setQuickFilter(event.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Podcast Player</h1>\n      <div>\n        <label htmlFor=\"rssFeedUrl\">RSS Feed URL:</label>\n        <input type=\"text\" id=\"rssFeedUrl\" name=\"rssFeedUrl\"  style={{width:\"50%\"}} defaultValue={rssFeed}/>\n        <button onClick={handleLoadFeedClick}>Load Feed</button>\n      </div>\n      <div>\n      <label htmlFor=\"quickfilter\">Quick Filter:</label>\n        <input type=\"text\" id=\"quickfilter\" name=\"quickfilter\" style={{width:\"30%\"}} value={quickFilter}\n              onChange={handleFilterChange}/>        \n      </div>\n      <div>\n        <PodcastGrid\n        rssfeed = {rssFeed}\n        height=\"500px\"\n        width=\"100%\"     \n        quickFilter = {quickFilter}   \n      ></PodcastGrid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}