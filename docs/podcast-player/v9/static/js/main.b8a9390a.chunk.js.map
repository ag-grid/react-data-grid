{"version":3,"sources":["PodcastGrid.js","App.js","reportWebVitals.js","index.js"],"names":["PodcastGrid","props","useState","rowData","setRowData","gridApi","setGridApi","useEffect","rssfeed","trim","fetch","then","response","text","str","window","DOMParser","parseFromString","data","itemList","querySelectorAll","items","forEach","el","push","pubDate","Date","querySelector","textContent","title","innerHTML","mp3","getAttribute","description","replace","columnDefs","headerName","field","wrapText","autoHeight","flex","resizable","filter","sortable","hide","cellRenderer","params","controls","preload","style","height","verticalAlign","src","value","type","setQuickFilter","quickFilter","className","width","onGridReady","api","pagination","paginationAutoPageSize","App","inputFeedUrl","setInputFeedUrl","rssFeed","setRssFeed","name","url","feedUrls","htmlFor","id","onChange","event","target","map","feed","onClick","inputRssFeed","document","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b8a9390a.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {AgGridReact} from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nexport function PodcastGrid(props) {\n\n    const [rowData, setRowData] = useState([]);\n    const [gridApi, setGridApi] = useState();\n\n    useEffect(()=>{\n\n      if(!props.rssfeed)\n        return;\n\n      if(props.rssfeed.trim()==\"\")\n        return;\n\n      fetch(props.rssfeed)\n                .then(response => response.text())\n                .then(str => new window.DOMParser().parseFromString(str, 'text/xml'))\n                .then(data => {                                         \n                    const itemList = data.querySelectorAll('item');\n            \n                    const items=[];\n                    itemList.forEach(el => {\n                        items.push({\n                        pubDate: new Date(el.querySelector('pubDate').textContent),\n                        title: el.querySelector('title').innerHTML,\n                        mp3: el.querySelector('enclosure').getAttribute('url'),\n                        description: el\n                            .querySelector('description')\n                            .textContent.replace(/(<([^>]+)>)/gi, ''),\n                        });\n                    });\n                    setRowData(items)\n                });\n\n    },[props.rssfeed]);\n\n    var columnDefs = [\n        {\n          headerName: 'Episode Title',\n          field: 'title',\n          wrapText: true,\n          autoHeight: true,\n          flex: 2,\n          resizable: true,\n          filter: `agGridTextFilter`\n        },\n        {\n          headerName: 'Published',\n          field: 'pubDate',\n          flex: 1,\n          sortable: true,\n          filter: 'agDateColumnFilter'\n        },\n        {\n          field: 'description',\n          hide: true\n        },\n        {\n          headerName: 'Episode',\n          field: 'mp3',\n          flex: 1,\n          cellRenderer: (params => <audio controls preload=\"none\" \n                                      style={{height:\"2em\", verticalAlign: \"middle\"}}>\n                                      <source src={params.value} type=\"audio/mpeg\" />\n                                  </audio>),\n        }\n      ];\n\n    const onGridReady = (params) => {\n      setGridApi(params.api);\n    }\n\n    useEffect(()=>{\n      if(gridApi){\n        gridApi.setQuickFilter(props.quickFilter);\n      }\n    }, [gridApi, props.quickFilter])\n\n    return (\n       <div className=\"ag-theme-alpine\" style={{height: props.height, width: props.width}}>   \n           <AgGridReact\n                onGridReady={onGridReady}\n                rowData={rowData}\n                columnDefs ={columnDefs}\n                pagination={true}\n                paginationAutoPageSize={true}\n                >\n           </AgGridReact>\n       </div>\n    )\n};","import './App.css';\nimport React, {useState} from 'react';\nimport {PodcastGrid} from './PodcastGrid';\n\nfunction App() {\n\n  const [inputFeedUrl, setInputFeedUrl] = useState(\"https://feeds.simplecast.com/tOjNXec5\");\n  const [rssFeed, setRssFeed] = useState(\"\");\n  const [quickFilter, setQuickFilter] = useState(\"\");\n  const [feedUrls, setFeedUrls] = useState(\n            [\n              {name: \"WebRush\", url:\"https://feeds.simplecast.com/tOjNXec5\"},\n              {name: \"The Evil Tester Show\", url:\"https://feed.pod.co/the-evil-tester-show\"},\n              {name: \"The Change log\", url:\"https://changelog.com/podcast/feed\"},\n              {name: \"JS Party\", url: \"https://changelog.com/jsparty/feed\"},\n              {name: \"Founders Talk\", url:\"https://changelog.com/founderstalk/feed\"},\n            ]\n  );\n\n  const handleLoadFeedClick = ()=>{\n    const inputRssFeed = document.getElementById(\"rssFeedUrl\").value;\n    setRssFeed(inputRssFeed);\n  }\n\n  const handleFilterChange = (event)=>{\n    setQuickFilter(event.target.value);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>Podcast Player</h1>\n      <div>\n        <label htmlFor=\"podcasts\">Choose a podcast:</label>\n        <select name=\"podcasts\" id=\"podcasts\" value={inputFeedUrl}\n              onChange={(event)=>setInputFeedUrl(event.target.value)}>\n              {feedUrls.map((feed) =>\n                <option value={feed.url} key={feed.url}\n                >{feed.name}</option>)}\n        </select>\n      </div>\n      <div>\n        <label htmlFor=\"rssFeedUrl\">RSS Feed URL:</label>\n        <input type=\"text\" id=\"rssFeedUrl\" name=\"rssFeedUrl\"  style={{width:\"50%\"}} \n                value={inputFeedUrl}\n                onChange={(event)=>setInputFeedUrl(event.target.value)}/>\n        <button onClick={handleLoadFeedClick}>Load Feed</button>\n      </div>\n      <div>\n      <label htmlFor=\"quickfilter\">Quick Filter:</label>\n        <input type=\"text\" id=\"quickfilter\" name=\"quickfilter\" style={{width:\"30%\"}} value={quickFilter}\n              onChange={handleFilterChange}/>        \n      </div>\n      <div>\n        <PodcastGrid rssfeed = {rssFeed}\n                     height=\"500px\" width=\"100%\"     \n                     quickFilter = {quickFilter}   \n      ></PodcastGrid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}