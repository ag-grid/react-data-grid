{"version":3,"sources":["PodcastGrid.js","App.js","reportWebVitals.js","index.js"],"names":["PodcastGrid","props","useState","title","pubDate","Date","mp3","rowData","className","style","height","width","columnDefs","headerName","field","App","rssfeed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAMO,SAASA,EAAYC,GAEpB,MAA8BC,mBAAS,CACX,CAACC,MAAO,aACRC,QAAS,IAAIC,KACbC,IAAK,mCAHjC,mBAAOC,EAAP,UAoBJ,OACG,qBAAKC,UAAU,kBAAkBC,MAAO,CAACC,OAAQT,EAAMS,OAAQC,MAAOV,EAAMU,OAA5E,SACI,cAAC,cAAD,CACKJ,QAASA,EACTK,WAnBK,CACb,CACEC,WAAY,gBACZC,MAAO,SAET,CACED,WAAY,YACZC,MAAO,WAET,CACED,WAAY,UACZC,MAAO,YCRFC,MAbf,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,gDACA,cAACR,EAAD,CACEgB,QAAU,wCACVN,OAAO,QACPC,MAAM,aCECM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dad57dc8.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {AgGridReact} from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nexport function PodcastGrid(props) {\n\n        const [rowData, setRowData] = useState([\n                                    {title: \"my episode\", \n                                    pubDate: new Date(), \n                                    mp3: \"https://mypodcast/episode.mp3\"}]);\n\n    var columnDefs = [\n        {\n          headerName: 'Episode Title',\n          field: 'title',\n        },\n        {\n          headerName: 'Published',\n          field: 'pubDate',\n        },\n        {\n          headerName: 'Episode',\n          field: 'mp3',\n        }\n      ];\n\n    return (\n       <div className=\"ag-theme-alpine\" style={{height: props.height, width: props.width}}>   \n           <AgGridReact\n                rowData={rowData}\n                columnDefs ={columnDefs}\n                >\n           </AgGridReact>\n       </div>\n    )\n}","import './App.css';\nimport {PodcastGrid} from './PodcastGrid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Podcast Player</h1>\n      <PodcastGrid\n        rssfeed = \"https://feeds.simplecast.com/tOjNXec5\"\n        height=\"500px\"\n        width=\"100%\"\n      ></PodcastGrid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}